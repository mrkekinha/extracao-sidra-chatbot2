import streamlit as st
import pandas as pd
import plotly.express as px
from dotenv import load_dotenv
import os

from langchain.agents import initialize_agent, Tool
from langchain.agents.agent_types import AgentType
from langchain_groq import ChatGroq

from tools.sidra_tool import (
    consultar_sidra,
    listar_campos_da_tabela,
    get_municipios_mg,
    get_cod_estado
)

# Configura√ß√£o inicial
st.set_page_config(page_title="Chatbot IBGE", layout="wide")
st.title("ü§ñ Chatbot IBGE com Dados Municipais")

# --- Tabelas dispon√≠veis ---
tabelas_disponiveis = {
    "1419": "Produ√ß√£o de Leite por Munic√≠pio",
    "6579": "Popula√ß√£o residente por Munic√≠pio",
    "2938": "Produto Interno Bruto dos Munic√≠pios",
    "1612": "Efetivo de rebanhos, por tipo de rebanho",
    "5440": "N√∫mero de estabelecimentos agropecu√°rios por atividade",
    "7060": "√Årea plantada e colhida das principais lavouras",
    "2508": "Popula√ß√£o economicamente ativa por munic√≠pio",
    "1620": "Produ√ß√£o de ovos de galinha",
    "1398": "Produ√ß√£o de cana-de-a√ß√∫car",
}

# --- Sidebar ---
with st.sidebar:
    st.header("üîç Par√¢metros de consulta")
    tabela_nome = st.selectbox("Escolha a tabela:", options=list(tabelas_disponiveis.values()))
    tabela_num = [k for k, v in tabelas_disponiveis.items() if v == tabela_nome][0]

    nivel = st.radio("Escolha o n√≠vel territorial:", ["municipal", "estadual"])

    if nivel == "municipal":
        municipios = get_municipios_mg()
        local = st.selectbox("Munic√≠pio (MG):", options=municipios)
        local_param = municipios[local]
    else:
        local = st.text_input("Estado (nome ou c√≥digo IBGE):", placeholder="Ex: Minas Gerais ou 31")
        local_param = get_cod_estado(local)

    variaveis = st.text_input("C√≥digos das vari√°veis (opcional):", placeholder="Ex: 37, 593")

    col1, col2 = st.columns(2)
    with col1:
        consultar = st.button("üîé Consultar")
    with col2:
        ver_campos = st.button("üìÑ Ver vari√°veis dispon√≠veis")

# --- Mostrar campos dispon√≠veis da tabela ---
if ver_campos:
    st.info(f"üîç Vari√°veis dispon√≠veis na tabela {tabela_num}: {tabela_nome}")
    try:
        campos = listar_campos_da_tabela(tabela_num)
        for campo in campos:
            st.markdown(f"- {campo}")
    except Exception as e:
        st.error(f"Erro ao listar campos: {e}")

# --- Executar consulta ao SIDRA ---
if consultar:
    st.subheader("üìä Resultado da Consulta")

    try:
        df = consultar_sidra(tabela_num, nivel, local_param, variaveis)
        st.dataframe(df)

        # Gr√°fico autom√°tico
        st.subheader("üìà Gr√°fico")
        colunas_numericas = df.select_dtypes(include=["float64", "int64"]).columns
        if len(colunas_numericas) >= 1:
            col_grafico = st.selectbox("Coluna para o gr√°fico:", options=colunas_numericas)
            fig = px.bar(df, x=df.columns[0], y=col_grafico, title=f"Gr√°fico de {col_grafico}")
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("N√£o h√° colunas num√©ricas suficientes para gerar gr√°fico.")

    except Exception as e:
        st.error(f"‚ùå Erro ao consultar o SIDRA: {e}")
        st.markdown("üí° **Dicas:**")
        st.markdown("- Verifique se o n√∫mero da tabela est√° correto;")
        st.markdown("- Informe corretamente 'municipal' ou 'estadual';")
        st.markdown("- Verifique o nome ou c√≥digo do munic√≠pio/estado (ex: '3106200' para BH);")
        st.markdown("- Use 'all' para consultar todos os locais.")

# --- Agente LangChain integrado ---
st.divider()
st.header("üß† Chat com o Assistente IBGE")

# Define as ferramentas (tools) que o agente pode usar
tools = [
    Tool.from_function(
        name="Consulta SIDRA",
        func=consultar_sidra,
        description="Consulta dados do SIDRA. Argumentos: tabela (str), nivel (municipal ou estadual), local (str), variaveis (str ou vazio)."
    ),
    Tool.from_function(
        name="Listar campos da tabela",
        func=listar_campos_da_tabela,
        description="Lista os campos dispon√≠veis de uma tabela do SIDRA. Argumento: tabela (str)"
    )
]

load_dotenv()
groq_api_key = os.getenv("GROQ_API_KEY")
if groq_api_key is None:
    raise ValueError("‚ùå A vari√°vel de ambiente GROQ_API_KEY n√£o foi encontrada. Verifique seu arquivo .env")

llm = ChatGroq(
    temperature=0,
    model_name="llama3-8b-8192",
    groq_api_key=groq_api_key
)

agent = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)

# Caixa de entrada do usu√°rio
pergunta = st.text_input("Digite sua pergunta para o assistente:", placeholder="Ex: Quais os campos da tabela 2938?")

if pergunta:
    with st.spinner("Consultando agente..."):
        resposta = agent.run(pergunta)
        st.success("‚úÖ Resposta do assistente:")
        st.write(resposta)